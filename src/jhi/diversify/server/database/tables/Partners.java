/*
 * This file is generated by jOOQ.
 */
package jhi.diversify.server.database.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jhi.diversify.server.database.Diversify;
import jhi.diversify.server.database.Indexes;
import jhi.diversify.server.database.Keys;
import jhi.diversify.server.database.tables.records.PartnersRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Partners extends TableImpl<PartnersRecord> {

    /**
     * The reference instance of <code>diversify.partners</code>
     */
    public static final Partners PARTNERS = new Partners();
    private static final long serialVersionUID = 1151645584;

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PartnersRecord> getRecordType() {
        return PartnersRecord.class;
    }
    /**
     * The column <code>diversify.partners.id</code>.
     */
    public final TableField<PartnersRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>diversify.partners.partnername</code>.
     */
    public final TableField<PartnersRecord, String> PARTNERNAME = createField("partnername", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>diversify.partners.created_on</code>.
     */
    public final TableField<PartnersRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>diversify.partners.updated_on</code>.
     */
    public final TableField<PartnersRecord, Timestamp> UPDATED_ON = createField("updated_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>diversify.partners</code> table reference
     */
    public Partners() {
        this(DSL.name("partners"), null);
    }

    /**
     * Create an aliased <code>diversify.partners</code> table reference
     */
    public Partners(String alias) {
        this(DSL.name(alias), PARTNERS);
    }

    /**
     * Create an aliased <code>diversify.partners</code> table reference
     */
    public Partners(Name alias) {
        this(alias, PARTNERS);
    }

    private Partners(Name alias, Table<PartnersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Partners(Name alias, Table<PartnersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Partners(Table<O> child, ForeignKey<O, PartnersRecord> key) {
        super(child, key, PARTNERS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Diversify.DIVERSIFY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PARTNERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PartnersRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PARTNERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PartnersRecord> getPrimaryKey() {
        return Keys.KEY_PARTNERS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PartnersRecord>> getKeys() {
        return Arrays.<UniqueKey<PartnersRecord>>asList(Keys.KEY_PARTNERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Partners as(String alias) {
        return new Partners(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Partners as(Name alias) {
        return new Partners(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Partners rename(String name) {
        return new Partners(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Partners rename(Name name) {
        return new Partners(name, null);
    }
}

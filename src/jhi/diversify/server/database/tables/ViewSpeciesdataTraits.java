/*
 * This file is generated by jOOQ.
 */
package jhi.diversify.server.database.tables;


import org.jooq.*;
import org.jooq.impl.*;

import java.sql.*;

import javax.annotation.*;

import jhi.diversify.server.database.*;
import jhi.diversify.server.database.tables.records.*;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewSpeciesdataTraits extends TableImpl<ViewSpeciesdataTraitsRecord> {

    /**
     * The reference instance of <code>diversify3.view_speciesdata_traits</code>
     */
    public static final ViewSpeciesdataTraits VIEW_SPECIESDATA_TRAITS = new ViewSpeciesdataTraits();
    private static final long serialVersionUID = 1612906261;
    /**
     * The column <code>diversify3.view_speciesdata_traits.id</code>.
     */
    public final TableField<ViewSpeciesdataTraitsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");
    /**
     * The column <code>diversify3.view_speciesdata_traits.traitname</code>.
     */
    public final TableField<ViewSpeciesdataTraitsRecord, String> TRAITNAME = createField("traitname", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>diversify3.view_speciesdata_traits.traitcode</code>.
     */
    public final TableField<ViewSpeciesdataTraitsRecord, String> TRAITCODE = createField("traitcode", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>diversify3.view_speciesdata_traits.unit</code>.
     */
    public final TableField<ViewSpeciesdataTraitsRecord, String> UNIT = createField("unit", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");
    /**
     * The column <code>diversify3.view_speciesdata_traits.created_on</code>.
     */
    public final TableField<ViewSpeciesdataTraitsRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");
    /**
     * The column <code>diversify3.view_speciesdata_traits.updated_on</code>.
     */
    public final TableField<ViewSpeciesdataTraitsRecord, Timestamp> UPDATED_ON = createField("updated_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");
    /**
     * The column <code>diversify3.view_speciesdata_traits.datapoints</code>.
     */
    public final TableField<ViewSpeciesdataTraitsRecord, Long> DATAPOINTS = createField("datapoints", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");
    /**
     * The column <code>diversify3.view_speciesdata_traits.plots</code>.
     */
    public final TableField<ViewSpeciesdataTraitsRecord, Long> PLOTS = createField("plots", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>diversify3.view_speciesdata_traits</code> table reference
     */
    public ViewSpeciesdataTraits() {
        this(DSL.name("view_speciesdata_traits"), null);
    }

    /**
     * Create an aliased <code>diversify3.view_speciesdata_traits</code> table reference
     */
    public ViewSpeciesdataTraits(String alias) {
        this(DSL.name(alias), VIEW_SPECIESDATA_TRAITS);
    }

    /**
     * Create an aliased <code>diversify3.view_speciesdata_traits</code> table reference
     */
    public ViewSpeciesdataTraits(Name alias) {
        this(alias, VIEW_SPECIESDATA_TRAITS);
    }

    private ViewSpeciesdataTraits(Name alias, Table<ViewSpeciesdataTraitsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewSpeciesdataTraits(Name alias, Table<ViewSpeciesdataTraitsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"));
    }

    public <O extends Record> ViewSpeciesdataTraits(Table<O> child, ForeignKey<O, ViewSpeciesdataTraitsRecord> key) {
        super(child, key, VIEW_SPECIESDATA_TRAITS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewSpeciesdataTraitsRecord> getRecordType() {
        return ViewSpeciesdataTraitsRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Diversify3.DIVERSIFY3;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewSpeciesdataTraits as(String alias) {
        return new ViewSpeciesdataTraits(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ViewSpeciesdataTraits as(Name alias) {
        return new ViewSpeciesdataTraits(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewSpeciesdataTraits rename(String name) {
        return new ViewSpeciesdataTraits(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewSpeciesdataTraits rename(Name name) {
        return new ViewSpeciesdataTraits(name, null);
    }
}
